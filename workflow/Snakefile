from pandas import read_csv
from os.path import join, isfile
from snakemake.utils import min_version
from snakemake.io import expand

__author__ = "Graeme Ford"
__credits__ = [
    "Graeme Ford",
    "Prof. Michael S. Pepper",
    "Prof. Fourie Joubert",
    "Fatima Barmania",
    "Megan Holborn",
]
__version__ = "1.0.0"
__maintainer__ = "Graeme Ford"
__email__ = "graeme.ford@tuks.co.za"
__status__ = "Development"

# Enforce version check
min_version("6")  # DEFINE CONFIG FILE FOR SNAKEMAKE:


# IMPORT SAMPLES METADATA
configfile: join("config", "config.json")


# SET REPORT TEMPLATE
report: "report/template.rst"


# IMPORT SAMPLE METADATA
samples = read_csv(join("input", "samples.csv"), header=0)

# SET CLUSTER CATEGORIES
cluster_assignments = set(
    [
        grouping_category
        for grouping_category in samples.keys()
        if grouping_category not in ["sample_name", "dataset"]
    ]
)

# DEFINE CONTEXT-VARIABLES:
bExtensions = ["bed", "bim", "fam"]
tExtensions = ["map", "ped"]

if not isfile("input/All.vcf.gz"):

    rule SymLink:
        """
        Create a symbolic link to the input folder when this is used aspart of the Pharmacogenetics workflow.
        """
        input:
            "results/FILTER/ALL_FILTERED.vcf.gz",
        output:
            "input/All.vcf.gz",
        shell:
            """

            ln -s {input} {output}

            """


rule Admixture_v1p3:
    """
    An imlementation of the Admixture-1.3 software, a parametric maximum-likelihood-based sofwtare for group assignment in population genetics.
    """
    input:
        "input/All.vcf.gz",
    output:
        "results/{cluster_assignment}/Population_Structure/Admixture_1.3.{k}.P",
        "results/{cluster_assignment}/Population_Structure/Admixture_1.3.{k}.Q",
    envmodules:
        config["envmodules"]["Admixture-1.3"],
        config["envmodules"]["Plink-1.9"],
    shell:
        """

        echo -e "\n--- LOG SECTION START | Plink-1.9 'Prepare input file forat' ---" 1>&2

        plink --vcf {input} --make-bed --out results/{wildcards.cluster_assignment}/Population_Structure/Admixture_1.3

        echo -e "--- LOG SECTION END | Plink-1.9 'Prepare input file forat' ---\n" 1>&2



        echo -e "\n--- LOG SECTION START | Admixture-1.3 'Perform k-means maximum-liklihood group assignment' ---" 1>&2
        cd results/{wildcards.cluster_assignment}/Population_Structure/
        admixture Admixture_1.3.bed {wildcards.k}
        cd ../../..
        echo -e "--- LOG SECTION END | Admixture-1.3 'Perform k-means maximum-liklihood group assignment' ---\n" 1>&2

        """

rule Admixture_v1p3_Graphs:
    """
    A rule to produce the graphs for Admixture-1.3.0.
    """
    input: 
        expand("results/{{cluster_assignment}}/Population_Structure/Admixture_1.3.{{k}}.{ext}", ext=["P", "Q"])
    output:
        report("results/{cluster_assignment}/Population_Structure/Admixture-1.3_Graph.{k}.jpeg", category="{cluster_assignment}", subcategory="Admixture-1.3", caption="report/Admixture_1.3.rst")
    script:
        "scripts/Admixture_graph.py"


# rule STRUCTURE:
#     """
#     An imlementation of the STURCTURE software, a parametric beysian-based sofwtare for group assignment in population genetics.
#     """

#     input:
#         "input/All.vcf.gz"
#     output:
#         "results/{cluster_assignment}/Population_Structure/STRUCTURE_{cluster}.yes",
#     envmodules:
#         config["envmodules"]["STRUCTURE"],
#     shell:
#         """
#         echo -e "\n--- LOG SECTION START | STRUCTURE 'Perform k-means beysian group assignment' ---" 1>&2
#         structure
#         echo -e "--- LOG SECTION END | STRUCTURE 'Perform k-means beysian group assignment' ---\n" 1>&2
#         """

# Unfortionately Plink-2.0's PCA requires at least 50 samples in order to run a PCA. If it does not get them, it will error and kill the process otherwise.
if not len(samples.index) < 50:
    rule Plink_PCA:
        """
        An imlementation of the Plink-2.0 softwares variance-standardized relationship-matrix based PCA method.
        """
        input:
            "input/All.vcf.gz",
        output:
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.prune.in",
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.prune.out",
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenvec",# `--pca` Eigenvectors
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenval",# `--pca` Eigenvalues
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenvec.allele.zst", # `--pca` Allele weights
        envmodules:
            config["envmodules"]["Plink-2"],
        shell:
            """
            echo -e "\n--- LOG SECTION START | Plink-2.0 'Filter variants in disequilibrium' ---" 1>&2
            plink2 --vcf {input} --indep-pairwise 50 5 0.5 --out results/{wildcards.cluster_assignment}/Population_Structure/Plink-PCA
            echo -e "--- LOG SECTION END | Plink-2.0 'Filter variants in disequilibrium' ---\n" 1>&2



            echo -e "\n--- LOG SECTION START | Plink-2.0 'Perform Principle Component Analysis (PCA)' ---" 1>&2
            plink2 --vcf {input} --exclude results/{wildcards.cluster_assignment}/Population_Structure/Plink-PCA.prune.out --mac 2 --pca allele-wts vzs scols=sid --out results/{wildcards.cluster_assignment}/Population_Structure/Plink-PCA
            echo -e "--- LOG SECTION END | Plink-2.0 'Perform Principle Component Analysis (PCA)' ---\n" 1>&2
            """

    rule Plink2_Graphs:
        """
        A rule to graph the PLink-2.0 PCA's results.
        """
        input:
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenvec",# `--pca` Eigenvectors
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenval",# `--pca` Eigenvalues
        output:
            report("results/{cluster_assignment}/Population_Structure/Plink-PCA.jpeg", category="{cluster_assignment}", subcategory="Plink-2 PCA", caption="report/Plink2_PCA.rst")
        envmodules:
            config["envmodules"]["python"]
        script:
            "scripts/Plink_PCA.py"


rule DAPC:
    """
    An implpementation of the Discriminant Analysis of Principle Components, an altered framework for solving for discriminate components.
    """
    input:
        "input/All.vcf.gz",
    output:
        report(
            "results/{cluster_assignment}/Population_Structure/DAPC_scatter_plot.png",
            category="{cluster_assignment}",
            subcategory="DAPC",
            caption="report/DAPC.rst"
        ),
        report(
            "results/{cluster_assignment}/Population_Structure/DAPC_population_inferences.png",
            category="{cluster_assignment}",
            subcategory="DAPC",
            caption="report/DAPC.rst"
        ),
    envmodules:
        config["envmodules"]["R"],
    params:
        cluster_assignments=lambda wildcards: samples[
            wildcards.cluster_assignment
        ].tolist(),
    script:
        "scripts/DAPC-PCA.R"


analysis_files = []
# Admixture-1.3
analysis_files.append(
    expand(
        [
            "results/{cluster_assignment}/Population_Structure/Admixture_1.3.{k}.P",
            "results/{cluster_assignment}/Population_Structure/Admixture_1.3.{k}.Q",
        ],
        zip,
        cluster_assignment=[
            grouping_name
            for grouping_name in samples.keys()
            if grouping_name != "sample_name"
        ],
        k=[
            len(samples[clusters].unique())
            for clusters in samples.keys()
            if clusters != "sample_name"
        ],
    )
)
analysis_files.append(
    expand(
        "results/{cluster_assignment}/Population_Structure/Admixture-1.3_Graph.{k}.jpeg",
        zip,
        cluster_assignment=[
                grouping_name
                for grouping_name in samples.keys()
                if grouping_name != "sample_name"
            ],
        k=[len(groups) for groups in [samples[k].unique() for k in  [
                grouping_name
                for grouping_name in samples.keys()
                if grouping_name != "sample_name"
            ]]]
    )
)

# DAPC
analysis_files.append(
    expand(
        [
            "results/{cluster_assignment}/Population_Structure/DAPC_scatter_plot.png",
            "results/{cluster_assignment}/Population_Structure/DAPC_population_inferences.png",
        ],
        cluster_assignment=[
            grouping_name
            for grouping_name in samples.keys()
            if grouping_name != "sample_name"
        ],
    )
)

# Plink-2.0 min 50 samples limit or pipeline go boom
if not len(samples.index) < 50:
    # Plink-2.0
    analysis_files.append(
        expand(
            [
                "results/{cluster_assignment}/Population_Structure/Plink-PCA.prune.in",
                "results/{cluster_assignment}/Population_Structure/Plink-PCA.prune.out",
                "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenvec",# `--pca` Eigenvectors
                "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenval",# `--pca` Eigenvalues
                "results/{cluster_assignment}/Population_Structure/Plink-PCA.eigenvec.allele.zst", # `--pca` Allele weights
            ],
            cluster_assignment=[
                grouping_name
                for grouping_name in samples.keys()
                if grouping_name != "sample_name"
            ],
        )
    )
    analysis_files.append(
        expand(
            "results/{cluster_assignment}/Population_Structure/Plink-PCA.jpeg",
            cluster_assignment=[
                grouping_name
                for grouping_name in samples.keys()
                if grouping_name != "sample_name"
            ]
        )
    )

rule all:
    """
    Full suite of analyses to describe population structure using both parametric and non-parametric methods.
    """
    input:
        analysis_files,
